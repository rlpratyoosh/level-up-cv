generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  userName           String              @unique
  email              String              @unique
  password           String
  isVerified         Boolean             @default(false)
  profile            Profile?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id])
}

model Profile {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id])
  fullName         String?
  bio              String?
  avatarUrl        String?
  title            String?
  totalXp          Int               @default(0)
  currentXpInLevel Int               @default(0)
  level            Int               @default(1)
  hasLevelledUp    Boolean           @default(false)
  resumes          Resume[]
  skills           Skill[]
  projects         Project[]
  experiences      Experience[]
  educations       Education[]
  certifications   Certification[]
  achievements     UserAchievement[]
  activities       Activity[]
  createdAt        DateTime          @default(now())
}

model Resume {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  includedIds Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id])
}

model Skill {
  id          String             @id @default(cuid())
  profileId   String
  name        String
  totalXp     Int                @default(0)
  level       Int                @default(1)
  title       String?
  projects    ProjectSkills[]
  experiences ExperienceSkills[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  profile     Profile            @relation(fields: [profileId], references: [id])
}

model Project {
  id          String          @id @default(cuid())
  profileId   String
  title       String
  description String?
  link        String?
  skills      ProjectSkills[]
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  profile     Profile         @relation(fields: [profileId], references: [id])
}

model ProjectSkills {
  id        String  @id @default(cuid())
  projectId String
  skillId   String
  project   Project @relation(fields: [projectId], references: [id])
  skill     Skill   @relation(fields: [skillId], references: [id])
}

model Experience {
  id        String             @id @default(cuid())
  profileId String
  role      String
  company   String
  summary   String?
  startDate DateTime?
  endDate   DateTime?
  skills    ExperienceSkills[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  profile   Profile            @relation(fields: [profileId], references: [id])
}

model ExperienceSkills {
  id           String     @id @default(cuid())
  experienceId String
  skillId      String
  experience   Experience @relation(fields: [experienceId], references: [id])
  skill        Skill      @relation(fields: [skillId], references: [id])
}

model Education {
  id          String    @id @default(cuid())
  profileId   String
  institution String
  degree      String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile   @relation(fields: [profileId], references: [id])
}

model Certification {
  id             String    @id @default(cuid())
  profileId      String
  title          String
  issuer         String
  issueDate      DateTime?
  expirationDate DateTime?
  link           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile   @relation(fields: [profileId], references: [id])
}

model Achievement {
  id               String            @id @default(cuid())
  title            String
  description      String?
  userAchievements UserAchievement[]
  createdAt        DateTime          @default(now())
}

model UserAchievement {
  id            String      @id @default(cuid())
  profileId     String
  achievementId String
  profile       Profile     @relation(fields: [profileId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  createdAt     DateTime    @default(now())
}

model Activity {
  id        String       @id @default(cuid())
  profileId String
  type      ActivityType
  details   String
  createdAt DateTime     @default(now())
  profile   Profile      @relation(fields: [profileId], references: [id])
}

enum ActivityType {
  SKILL
  PROJECT
  EXPERIENCE
  EDUCATION
  CERTIFICATION
  ACHIEVEMENT
}
